package com.ukkosnetti.gladius.gui;

import java.awt.Color;
import java.util.Iterator;
import java.util.List;

import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

import com.ukkosnetti.gladius.controller.Controller;
import com.ukkosnetti.gladius.gui.components.GradientPanel;
import com.ukkosnetti.gladius.gui.components.RedButton;
import com.ukkosnetti.gladius.item.Armor;
import com.ukkosnetti.gladius.item.MeleeWeapon;
import com.ukkosnetti.gladius.item.RangedWeapon;
import com.ukkosnetti.gladius.item.Spell;

/**
 *
 * @author Humakt83
 */
public class ShopPanel extends GradientPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 6705217451780135135L;

	/** Creates new form ShopPanel */
	public ShopPanel() {
		initComponents();
	}

	public void setController(Controller c) {
		leave.setActionCommand("TAVERN_LEAVE");
		leave.addActionListener(c);
		purchase.setActionCommand("PURCHASE");
		purchase.addActionListener(c);
	}

	public String getSelectedItem() {
		if (ShopTabbed.getSelectedIndex() == 0) {
			int row = MeleeWeapons.getSelectedRow();
			return (String) MeleeWeapons.getModel().getValueAt(row, 0);
		}
		if (ShopTabbed.getSelectedIndex() == 1) {
			int row = RangedWeapons.getSelectedRow();
			return (String) RangedWeapons.getModel().getValueAt(row, 0);
		}
		if (ShopTabbed.getSelectedIndex() == 2) {
			int row = ArmorTable.getSelectedRow();
			return (String) ArmorTable.getModel().getValueAt(row, 0);
		}
		if (ShopTabbed.getSelectedIndex() == 3) {
			int row = SpellTable1.getSelectedRow();
			return (String) SpellTable1.getModel().getValueAt(row, 0);
		}
		if (ShopTabbed.getSelectedIndex() == 4) {
			int row = SpellTable2.getSelectedRow();
			return (String) SpellTable2.getModel().getValueAt(row, 0);
		}
		return null;
	}

	public void addShopItems(List<MeleeWeapon> melee, List<RangedWeapon> ranged, List<Armor> armor, List<Spell> damage, List<Spell> healing) {
		int rc = MeleeWeapons.getRowCount();
		DefaultTableModel dtm = (DefaultTableModel) MeleeWeapons.getModel();
		for (int i = rc - 1; i >= 0; i--)
			dtm.removeRow(i);
		Iterator<MeleeWeapon> it = melee.iterator();
		while (it.hasNext()) {
			MeleeWeapon apu = it.next();
			String[] t = new String[4];
			t[0] = apu.getName();
			t[1] = apu.getWeaponType().name().toLowerCase();
			t[2] = apu.getMinDam() + "-" + apu.getMaxDam();
			t[3] = "" + apu.getPrice();
			dtm.addRow(t);
		}
		MeleeWeapons.revalidate();
		MeleeWeapons.setRowSelectionInterval(0, 0);
		rc = RangedWeapons.getRowCount();
		dtm = (DefaultTableModel) RangedWeapons.getModel();
		for (int i = rc - 1; i >= 0; i--)
			dtm.removeRow(i);
		Iterator<RangedWeapon> it2 = ranged.iterator();
		while (it2.hasNext()) {
			RangedWeapon apu = it2.next();
			String[] t = new String[4];
			t[0] = apu.getName();
			t[1] = apu.getWeaponType().name().toLowerCase();
			t[2] = apu.getMinDam() + "-" + apu.getMaxDam();
			t[3] = "" + apu.getPrice();
			dtm.addRow(t);
		}
		RangedWeapons.revalidate();
		RangedWeapons.setRowSelectionInterval(0, 0);
		rc = ArmorTable.getRowCount();
		dtm = (DefaultTableModel) ArmorTable.getModel();
		for (int i = rc - 1; i >= 0; i--)
			dtm.removeRow(i);
		Iterator<Armor> it3 = armor.iterator();
		while (it3.hasNext()) {
			Armor apu = it3.next();
			String[] t = new String[3];
			t[0] = apu.getName();
			t[1] = "" + apu.getArmor();
			t[2] = "" + apu.getPrice();
			dtm.addRow(t);
		}
		ArmorTable.revalidate();
		ArmorTable.setRowSelectionInterval(0, 0);
		rc = SpellTable1.getRowCount();
		dtm = (DefaultTableModel) SpellTable1.getModel();
		for (int i = rc - 1; i >= 0; i--)
			dtm.removeRow(i);
		Iterator<Spell> it4 = damage.iterator();
		while (it4.hasNext()) {
			Spell apu = it4.next();
			String[] t = new String[4];
			t[0] = apu.getName();
			t[1] = apu.getMinDamage() + "-" + apu.getMaxDamage();
			t[2] = apu.getManaCost() + "";
			t[3] = "" + apu.getPrice();
			dtm.addRow(t);
		}
		SpellTable1.revalidate();
		SpellTable1.setRowSelectionInterval(0, 0);
		rc = SpellTable2.getRowCount();
		dtm = (DefaultTableModel) SpellTable2.getModel();
		for (int i = rc - 1; i >= 0; i--)
			dtm.removeRow(i);
		Iterator<Spell> it5 = healing.iterator();
		while (it5.hasNext()) {
			Spell apu = it5.next();
			String[] t = new String[4];
			t[0] = apu.getName();
			t[1] = apu.getMinDamage() + "-" + apu.getMaxDamage();
			t[2] = apu.getManaCost() + "";
			t[3] = "" + apu.getPrice();
			dtm.addRow(t);
		}
		SpellTable2.revalidate();
		SpellTable2.setRowSelectionInterval(0, 0);
	}

	/*
	 * Lots of the code below are generated by NetBeans, however, I've made some
	 * adjustments there.
	 */
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		UIManager.put("TabbedPane.selected", new Color(190, 0, 0));
		ShopTabbed = new JTabbedPane();
		jScrollPane1 = new JScrollPane();
		MeleeWeapons = new JTable();
		jScrollPane2 = new JScrollPane();
		RangedWeapons = new JTable();
		jScrollPane3 = new JScrollPane();
		ArmorTable = new JTable();
		jScrollPane4 = new JScrollPane();
		SpellTable1 = new JTable();
		jScrollPane5 = new JScrollPane();
		SpellTable2 = new JTable();
		purchase = new RedButton();
		leave = new RedButton();
		setPreferredSize(new java.awt.Dimension(412, 333));
		// MeleeWeapons.setAutoCreateRowSorter(true);
		MeleeWeapons.setBackground(new java.awt.Color(255, 51, 0));
		MeleeWeapons.setForeground(new java.awt.Color(255, 255, 255));
		MeleeWeapons.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null }, null, { null, null, null }, null, { null, null, null }, null, { null, null, null }, null,
				{ null, null, null }, null, { null, null, null }, null, { null, null, null, null } }, new String[] { "Name", "Type", "Damage", "Price" }) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 2682093004769732923L;
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane1.setViewportView(MeleeWeapons);

		ShopTabbed.addTab("MELEE", jScrollPane1);

		// RangedWeapons.setAutoCreateRowSorter(true);
		RangedWeapons.setBackground(new java.awt.Color(255, 51, 0));
		RangedWeapons.setForeground(new java.awt.Color(255, 255, 255));
		RangedWeapons.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Name", "Type", "Damage", "Price" }) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 8853873651552122677L;
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane2.setViewportView(RangedWeapons);

		ShopTabbed.addTab("RANGED", jScrollPane2);

		// ArmorTable.setAutoCreateRowSorter(true);
		ArmorTable.setBackground(new java.awt.Color(255, 51, 0));
		ArmorTable.setForeground(new java.awt.Color(255, 255, 255));
		ArmorTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null },
				{ null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null },
				{ null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null } }, new String[] { "Name", "Armor", "Price" }) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 2312932615385095604L;
			boolean[] canEdit = new boolean[] { false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane3.setViewportView(ArmorTable);

		ShopTabbed.addTab("ARMOR", jScrollPane3);

		// SpellTable1.setAutoCreateRowSorter(true);
		SpellTable1.setBackground(new java.awt.Color(255, 51, 0));
		SpellTable1.setForeground(new java.awt.Color(255, 255, 255));
		SpellTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Name", "Damage", "Mana", "Price" }) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 4686676563673377788L;
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane4.setViewportView(SpellTable1);

		ShopTabbed.addTab("DAMAGE SPELLS", jScrollPane4);

		// SpellTable2.setAutoCreateRowSorter(true);
		SpellTable2.setBackground(new java.awt.Color(255, 51, 0));
		SpellTable2.setForeground(new java.awt.Color(255, 255, 255));
		SpellTable2.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null },
				{ null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Name", "Healing", "Mana", "Price" }) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 3244453824243459129L;
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane5.setViewportView(SpellTable2);

		ShopTabbed.addTab("HEALING SPELLS", jScrollPane5);

		purchase.setText("PURCHASE");
		purchase.setForeground(Color.WHITE);
		purchase.setBackground(Color.RED);

		leave.setText("LEAVE");
		leave.setForeground(Color.WHITE);
		leave.setBackground(Color.RED);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(ShopTabbed, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addGap(64, 64, 64).addComponent(purchase).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
								.addComponent(leave).addGap(57, 57, 57)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addComponent(ShopTabbed, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(leave).addComponent(purchase)).addContainerGap(25, Short.MAX_VALUE)));
		ShopTabbed.setBackground(Color.RED);
		ShopTabbed.setForeground(Color.WHITE);
		ArmorTable.getTableHeader().setForeground(Color.BLACK);
		ArmorTable.getTableHeader().setBackground(Color.YELLOW);
		ArmorTable.setSelectionBackground(Color.WHITE);
		ArmorTable.setSelectionForeground(Color.RED);
		ArmorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		ArmorTable.getTableHeader().setReorderingAllowed(false);
		MeleeWeapons.getTableHeader().setForeground(Color.BLACK);
		MeleeWeapons.getTableHeader().setBackground(Color.YELLOW);
		MeleeWeapons.setSelectionBackground(Color.WHITE);
		MeleeWeapons.setSelectionForeground(Color.RED);
		MeleeWeapons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		MeleeWeapons.getTableHeader().setReorderingAllowed(false);
		RangedWeapons.getTableHeader().setForeground(Color.BLACK);
		RangedWeapons.getTableHeader().setBackground(Color.YELLOW);
		RangedWeapons.setSelectionBackground(Color.WHITE);
		RangedWeapons.setSelectionForeground(Color.RED);
		RangedWeapons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		RangedWeapons.getTableHeader().setReorderingAllowed(false);
		SpellTable1.getTableHeader().setForeground(Color.BLACK);
		SpellTable1.getTableHeader().setBackground(Color.YELLOW);
		SpellTable1.setSelectionBackground(Color.WHITE);
		SpellTable1.setSelectionForeground(Color.RED);
		SpellTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		SpellTable1.getTableHeader().setReorderingAllowed(false);
		SpellTable2.getTableHeader().setForeground(Color.BLACK);
		SpellTable2.getTableHeader().setBackground(Color.YELLOW);
		SpellTable2.setSelectionBackground(Color.WHITE);
		SpellTable2.setSelectionForeground(Color.RED);
		SpellTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		SpellTable2.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setBackground(Color.RED);
		jScrollPane2.setBackground(Color.RED);
		jScrollPane3.setBackground(Color.RED);
		jScrollPane4.setBackground(Color.RED);
		jScrollPane5.setBackground(Color.RED);

	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTable ArmorTable;
	private javax.swing.JTable MeleeWeapons;
	private javax.swing.JTable RangedWeapons;
	private javax.swing.JTabbedPane ShopTabbed;
	private javax.swing.JTable SpellTable1;
	private javax.swing.JTable SpellTable2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JButton leave;
	private javax.swing.JButton purchase;
	// End of variables declaration//GEN-END:variables

}
